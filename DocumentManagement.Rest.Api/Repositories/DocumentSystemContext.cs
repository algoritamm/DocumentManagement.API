// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DocumentManagement.Rest.Api.Entities;
using Microsoft.EntityFrameworkCore;

namespace DocumentManagement.Rest.Api.Repositories;

public partial class DocumentSystemContext : DbContext
{
    public DocumentSystemContext(DbContextOptions<DocumentSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountRole> AccountRoles { get; set; }

    public virtual DbSet<BusinessProcess> BusinessProcesses { get; set; }

    public virtual DbSet<BusinessProcessStep> BusinessProcessSteps { get; set; }

    public virtual DbSet<Case> Cases { get; set; }

    public virtual DbSet<CaseEntity> CaseEntities { get; set; }

    public virtual DbSet<CaseWorkflow> CaseWorkflows { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentParticipantProcess> DocumentParticipantProcesses { get; set; }

    public virtual DbSet<DocumentWorkflow> DocumentWorkflows { get; set; }
    public virtual DbSet<Entity> Entities { get; set; }
    public virtual DbSet<EntityIndividual> EntityIndividuals { get; set; }
    public virtual DbSet<EntityLegal> EntityLegals { get; set; }
    public virtual DbSet<EntityType> EntityTypes { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<ServiceDef> ServiceDefs { get; set; }

    public virtual DbSet<Template> Templates { get; set; }

    public virtual DbSet<TemplateSign> TemplateSigns { get; set; }

    public virtual DbSet<TemplateSignPosition> TemplateSignPositions { get; set; }

    public virtual DbSet<TemplateSignType> TemplateSignTypes { get; set; }

    public virtual DbSet<TemplateType> TemplateTypes { get; set; }

    public virtual DbSet<TemplateRoleApprovalOrder> TemplateRoleApprovalOrders { get; set; }
    public virtual DbSet<DocumentVersion> DocumentVersions { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK_USER_ACCOUNT");

            entity.Property(e => e.UserCode).IsFixedLength();
        });

        modelBuilder.Entity<AccountRole>(entity =>
        {
            entity.HasKey(e => new { e.AccountId, e.RoleId });

            entity.ToTable("ACCOUNT_ROLE", "adm");

            entity.HasIndex(e => e.RoleId, "FK_ACCOUNT_RoleID");

            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.CreatedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TakeOverCaseId).HasColumnName("TakeOverCaseID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithMany(p => p.AccountRoles)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ACCOUNT_ROLE_ACCOUNT");

            entity.HasOne(d => d.Role).WithMany(p => p.AccountRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ACCOUNT_ROLE_ROLE");
        });

        modelBuilder.Entity<BusinessProcess>(entity =>
        {
            entity.HasKey(e => e.BusinessProcessId).HasName("PK_BUSSINES_PROCESS");

            entity.ToTable("BUSINESS_PROCESS", "bp");

            entity.HasIndex(e => e.BusinessProcessCode, "AK_BUSINESS_PROCESS").IsUnique();

            entity.HasIndex(e => e.BusinessProcessTypeId, "FK_BUSINESS_PROCESS_BusinessProcessTypeID");

            entity.Property(e => e.BusinessProcessId).HasColumnName("BusinessProcessID");
            entity.Property(e => e.BusinessProcessCode)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.BusinessProcessDescription)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.BusinessProcessFileBpmn)
                .HasColumnType("xml")
                .HasColumnName("BusinessProcessFileBPMN");
            entity.Property(e => e.BusinessProcessNameCyr)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.BusinessProcessNameEng)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.BusinessProcessNameLat)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.BusinessProcessTypeId).HasColumnName("BusinessProcessTypeID");
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NotificationEndCc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NotificationEndCC");
            entity.Property(e => e.RoleTypeIds)
                .IsRequired()
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("RoleTypeIDs");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BusinessProcessStep>(entity =>
        {
            entity.HasKey(e => e.BusinessProcessStepId).HasName("PK_BUSSINES_PROCESS_STEP");

            entity.Property(e => e.BusinessProcessStepId).ValueGeneratedNever();
            entity.Property(e => e.BusinessProcessStepOrder).IsFixedLength();

            entity.HasIndex(e => e.BusinessProcessId, "FK_BUSINESS_PROCESS_STEP_BusinessProcessTypeID");

            entity.Property(e => e.BusinessProcessStepId)
                .ValueGeneratedNever()
                .HasColumnName("BusinessProcessStepID");
            entity.Property(e => e.BusinessProcessId).HasColumnName("BusinessProcessID");
            entity.Property(e => e.BusinessProcessStepDescription)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.BusinessProcessStepNameLat)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.BusinessProcessStepOrder)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BusinessProcessStepTypeId).HasColumnName("BusinessProcessStepTypeID");
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NotificationTemplateTypeId).HasColumnName("NotificationTemplateTypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BusinessProcess).WithMany(p => p.BusinessProcessSteps)
                .HasForeignKey(d => d.BusinessProcessId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BUSINESS_PROCESS_STEP_BUSINESS_PROCESS");
        });

        modelBuilder.Entity<Case>(entity =>
        {
            entity.Property(e => e.CaseYear).IsFixedLength();

            entity.HasOne(d => d.Account).WithMany(p => p.CaseAccounts).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.BussinesProcessStep).WithMany(p => p.Cases).HasConstraintName("FK_CASE_BUSINESS_PROCESS_STEP");

            entity.HasOne(d => d.Role).WithMany(p => p.CaseRoles).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.TemplateType).WithMany(p => p.Cases).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<CaseEntity>(entity =>
        {
            entity.HasKey(e => new { e.CaseId, e.EntityId });

            entity.ToTable("CASE_ENTITY", "algo");

            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.EntityId).HasColumnName("EntityID");

            entity.HasOne(d => d.Case)
                    .WithMany(p => p.CaseEntities)
                    .HasForeignKey(d => d.CaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CASE_ENTITY_CASE");

            entity.HasOne(d => d.Entity)
                .WithMany(p => p.CaseEntities)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CASE_ENTITY_ENTITY");
        });

        modelBuilder.Entity<CaseWorkflow>(entity =>
        {
            entity.HasOne(d => d.Account).WithMany(p => p.CaseWorkflows).HasConstraintName("FK_CASE_WORKFLOW_ACCOUNT");

            entity.Property(e => e.CaseWorkFlowId).HasColumnName("CaseWorkFlowID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.BussinesProcessStepId).HasColumnName("BussinesProcessStepID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CaseResolutionDate).HasColumnType("date");
            entity.Property(e => e.CaseStatusId).HasColumnName("CaseStatusID");
            entity.Property(e => e.CaseWorkFlowDateTime).HasColumnType("datetime");
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithMany(p => p.CaseWorkflows)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_CASE_WORKFLOW_ACCOUNT");

            entity.HasOne(d => d.BussinesProcessStep).WithMany(p => p.CaseWorkflows)
                .HasForeignKey(d => d.BussinesProcessStepId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CASE_WORKFLOW_BUSINESS_PROCESS_STEP");

            entity.HasOne(d => d.Case).WithMany(p => p.CaseWorkflows)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CASE_WORKFLOW_CASE");

            entity.HasOne(d => d.Role).WithMany(p => p.CaseWorkflows).HasConstraintName("FK_CASE_WORKFLOW_ROLE");
        });

        modelBuilder.Entity<Document>(entity =>
        {

            entity.HasIndex(e => e.DocumentRefNumber, "AK_DOCUMENT").IsUnique();

            entity.HasIndex(e => e.AccountId, "FK_DOCUMENT_AccountID");

            entity.HasIndex(e => e.DocumentStatusId, "FK_DOCUMENT_DocumentStatusID");

            entity.HasIndex(e => e.TemplateId, "FK_DOCUMENT_TemplateID");

            entity.HasIndex(e => new { e.CaseId, e.DocumentCreatedDate }, "IX_DOCUMENT_1").IsDescending(false, true);

            entity.HasIndex(e => new { e.CaseId, e.DocumentId }, "IX_DOCUMENT_2");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.DocumentComment)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.DocumentCreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentDesription)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.DocumentRefNumber)
                .IsRequired()
                .HasMaxLength(18);
            entity.Property(e => e.DocumentStatusId).HasColumnName("DocumentStatusID");
            entity.Property(e => e.DocumentTitle)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");
            entity.Property(e => e.DocumentUrl)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsFileSent2Dms).HasColumnName("IsFileSent2DMS");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithMany(p => p.Documents)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENT_ACCOUNT");

            entity.HasOne(d => d.Case).WithMany(p => p.Documents)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENT_CASE");

            entity.HasOne(d => d.Template).WithMany(p => p.Documents).HasConstraintName("FK_DOCUMENT_TEMPLATE");
        });

        modelBuilder.Entity<DocumentParticipantProcess>(entity =>
        {
            entity.ToTable("DOCUMENT_PARTICIPANT_PROCESS", "algo");

            entity.HasIndex(e => e.AccountId, "IX_DOCUMENT_PARTICIPANT_PROCESS_AccountID");

            entity.HasIndex(e => e.DocumentId, "IX_DOCUMENT_PARTICIPANT_PROCESS_DocumentID");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.DocumentParticipantProcessId).HasColumnName("DocumentParticipantProcessID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.CommentNote).HasMaxLength(255);
            entity.Property(e => e.DefinitionDate).HasColumnType("datetime");
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SignType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithMany(p => p.DocumentParticipantProcesses)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENT_PARTICIPANT_PROCESS_ACCOUNT");

            entity.HasOne(d => d.Document).WithMany(p => p.DocumentParticipantProcesses)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENT_PARTICIPANT_PROCESS_DOCUMENT");

            entity.HasOne(d => d.Role)
                .WithMany(p => p.DocumentParticipantProcesses)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENT_PARTICIPANT_PROCESS_ROLE");
        });

        modelBuilder.Entity<DocumentWorkflow>(entity =>
        {
            entity.HasOne(d => d.Account).WithMany(p => p.DocumentWorkflows).HasConstraintName("FK_DOCUMENT_WORKFLOW_ACCOUNT");

            entity.HasIndex(e => e.DocumentId, "FK_DOCUMENT_WORKFLOW_DocumentID");

            entity.Property(e => e.DocumentWorkFlowId).HasColumnName("DocumentWorkFlowID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.BussinesProcessStepId).HasColumnName("BussinesProcessStepID");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.DocumentStatusId).HasColumnName("DocumentStatusID");
            entity.Property(e => e.DocumentWorkFlowDateTime).HasColumnType("datetime");
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithMany(p => p.DocumentWorkflows)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_DOCUMENT_WORKFLOW_ACCOUNT");

            entity.HasOne(d => d.BussinesProcessStep).WithMany(p => p.DocumentWorkflows)
                .HasForeignKey(d => d.BussinesProcessStepId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENT_WORKFLOW_BUSSINES_PROCESS_STEP");

            entity.HasOne(d => d.Document).WithMany(p => p.DocumentWorkflows)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENT_WORKFLOW_DOCUMENT");
        });

        modelBuilder.Entity<Entity>(entity =>
        {
            entity.ToTable("ENTITY", "ent");

            entity.HasIndex(e => e.EntityName)
                .HasDatabaseName("IX_ENTITY");

            entity.HasIndex(e => e.EntityTypeId)
                .HasDatabaseName("FK_ENTITY_EntityTypeID");

            entity.Property(e => e.EntityId).HasColumnName("EntityID");

            entity.Property(e => e.EntityName)
                .HasMaxLength(200);

            entity.Property(e => e.EntityTypeId).HasColumnName("EntityTypeID");

            entity.Property(e => e.InsertDate).HasColumnType("datetime");

            entity.Property(e => e.InsertUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.EntityType)
                .WithMany(p => p.Entities)
                .HasForeignKey(d => d.EntityTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ENTITY_ENTITY_TYPE");
        });

        modelBuilder.Entity<EntityIndividual>(entity =>
        {
            entity.HasKey(e => e.EntityId)
                .HasName("PK_PERSON_ENTITY");

            entity.ToTable("ENTITY_INDIVIDUAL", "ent");

            entity.HasIndex(e => e.Jmbg)
                .HasDatabaseName("AK_PERSON_ENTITY")
                .IsUnique();

            entity.HasIndex(e => new { e.LastName, e.FirstName })
                .HasDatabaseName("IX_PERSON_ENTITY");

            entity.Property(e => e.EntityId)
                .HasColumnName("EntityID")
                .ValueGeneratedNever();

            entity.Property(e => e.Address)
                .HasMaxLength(150);

            entity.Property(e => e.City)
                .HasMaxLength(30);

            entity.Property(e => e.EmailAddress)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.FirstName)
                .HasMaxLength(50);

            entity.Property(e => e.InsertDate).HasColumnType("datetime");

            entity.Property(e => e.InsertUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Jmbg)
                .HasColumnName("JMBG")
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.LastName)
                .HasMaxLength(50);

            entity.Property(e => e.TelephoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Zip)
                .HasColumnName("ZIP")
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Entity)
                .WithOne(p => p.EntityIndividual)
                .HasForeignKey<EntityIndividual>(d => d.EntityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PERSON_ENTITY_ENTITY");
        });

        modelBuilder.Entity<EntityLegal>(entity =>
        {
            entity.HasKey(e => e.EntityId)
                .HasName("PK_LEGAL_ENTITY");

            entity.ToTable("ENTITY_LEGAL", "ent");

            entity.HasIndex(e => e.Name)
                .HasDatabaseName("IX_LEGAL_ENTITY_Name");

            entity.HasIndex(e => e.Pib)
                .HasDatabaseName("IX_LEGAL_ENTITY_PIB");

            entity.HasIndex(e => new { e.CustomerId, e.Pib })
                .HasDatabaseName("AK_ENTITY_LEGAL_CustomerID_PIB")
                .IsUnique();

            entity.Property(e => e.EntityId)
                .HasColumnName("EntityID")
                .ValueGeneratedNever();

            entity.Property(e => e.Address)
                .HasMaxLength(150);

            entity.Property(e => e.City)
                .HasMaxLength(30);

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

            entity.Property(e => e.EmailAddress)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.InsertDate).HasColumnType("datetime");

            entity.Property(e => e.InsertUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Name)
                .HasMaxLength(200);

            entity.Property(e => e.Pib)
                .HasColumnName("PIB")
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.Property(e => e.TelephoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.Zip)
                .HasColumnName("ZIP")
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Entity)
                .WithOne(p => p.EntityLegal)
                .HasForeignKey<EntityLegal>(d => d.EntityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LEGAL_ENTITY_ENTITY");
        });

        modelBuilder.Entity<EntityType>(entity =>
        {
            entity.ToTable("ENTITY_TYPE", "ent");

            entity.Property(e => e.EntityTypeId).HasColumnName("EntityTypeID");

            entity.Property(e => e.EntityTypeNameCyr)
                .HasMaxLength(50);

            entity.Property(e => e.EntityTypeNameEng)
                .HasMaxLength(50);

            entity.Property(e => e.EntityTypeNameLat)
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.RoleCode).IsFixedLength();
        });

        modelBuilder.Entity<ServiceDef>(entity =>
        {
            entity.ToTable("SERVICE_DEF", "algo");

            entity.HasIndex(e => new { e.ServiceId, e.BusinessProcessId, e.TemplateId, e.RoleId }, "AK_SERVICE_DEF").IsUnique();

            entity.HasIndex(e => e.BusinessProcessId, "FK_SERVICE_DEF_BusinessProcessID");

            entity.HasIndex(e => e.RoleId, "FK_SERVICE_DEF_RoleID");

            entity.HasIndex(e => e.ServiceId, "FK_SERVICE_DEF_ServiceID");

            entity.HasIndex(e => e.TemplateId, "FK_SERVICE_DEF_TemplateID");

            entity.Property(e => e.ServiceDefId).HasColumnName("ServiceDefID");
            entity.Property(e => e.BusinessProcessId).HasColumnName("BusinessProcessID");
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BusinessProcess).WithMany(p => p.ServiceDefs)
                .HasForeignKey(d => d.BusinessProcessId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERVICE_DEF_BUSINESS_PROCESS");

            entity.HasOne(d => d.Role).WithMany(p => p.ServiceDefs)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERVICE_DEF_ROLE");

            entity.HasOne(d => d.Template).WithMany(p => p.ServiceDefs)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERVICE_DEF_TEMPLATE");
        });

        modelBuilder.Entity<Template>(entity =>
        {
            entity.HasOne(d => d.TemplateType).WithMany(p => p.Templates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEMPLATE_TEMPLATE_TYPE");
        });

        modelBuilder.Entity<TemplateSign>(entity =>
        {
            entity.HasOne(d => d.Template).WithMany(p => p.TemplateSigns)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEMPLATE_SIGN_TEMPLATE");

            entity.HasOne(d => d.TemplateSignType).WithMany(p => p.TemplateSigns)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEMPLATE_SIGN_TEMPLATE_SIGN_TYPE");
        });

        modelBuilder.Entity<TemplateSignPosition>(entity =>
        {
            entity.Property(e => e.TemplateSignPositionId).ValueGeneratedNever();

            entity.HasOne(d => d.TemplateSign).WithMany(p => p.TemplateSignPositions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEMPLATE_SIGN_POSITION_TEMPLATE_SIGN");
        });

        modelBuilder.Entity<TemplateType>(entity =>
        {
            entity.ToTable("TEMPLATE_TYPE", "algo", tb => tb.HasTrigger("t_upd_template_type_name"));

            entity.HasOne(d => d.TemplateTypeParent).WithMany(p => p.InverseTemplateTypeParent).HasConstraintName("FK_TEMPLATE_TYPE_TEMPLATE_TYPE");
        });

        modelBuilder.Entity<TemplateRoleApprovalOrder>(entity =>
        {
            entity.ToTable("TEMPLATE_ROLE_APPROVAL_ORDER", "algo");

            entity.HasKey(e => new { e.TemplateId, e.RoleId, e.ApprovalOrder }).HasName("PK_TEMPLATE_ROLE_APPPORAVAL_ORDER");
        });
        modelBuilder.Entity<DocumentVersion>(entity =>
        {
            entity.ToTable("DOCUMENT_VERSION", "algo");

            entity.HasIndex(e => e.DocumentId, "IX_DOCUMENT_VERSION_DocumentID");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.DocumentVersionID).HasColumnName("DocumentVersionID");
            entity.Property(e => e.DocumentUrl).HasMaxLength(255);
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.InsertUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateUser)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Document).WithMany(p => p.DocumentVersions)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENT_VERSION_DOCUMENT");
        });
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}